generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String         @id @default(uuid())
  name         String
  avatarUrl    String         @db.Text
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         Role           @default(VENDOR_USER)
  marketId     String?
  Market       Market?        @relation(fields: [marketId], references: [id], onDelete: Cascade)
  Permissions  Permissions[]
  Ticket       Ticket[]
  Notification Notification[]

  @@index([marketId])
}

model Permissions {
  id       String  @id @default(uuid())
  email    String
  vendorId String
  access   Boolean
  User     User    @relation(fields: [email], references: [email], onDelete: Cascade)
  Vendor   Vendor  @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
  @@index([email])
}

model Market {
  id               String                @id @default(uuid())
  connectAccountId String?               @default("")
  name             String
  marketLogo       String                @db.Text
  companyEmail     String                @db.Text
  companyPhone     String
  whiteLabel       Boolean               @default(true)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  goal             Int                   @default(5)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  users            User[]
  Vendor           Vendor[]
  SidebarOption    MarketSidebarOption[]
  Invitation       Invitation[]
  Notification     Notification[]
  Subscription     Subscription?
  AddOns           AddOns[]
}

model Vendor {
  id               String                @id @default(uuid())
  connectAccountId String?               @default("")
  name             String
  vendorLogo       String                @db.Text
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  companyEmail     String                @db.Text
  companyPhone     String
  goal             Int                   @default(5)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  marketId         String
  Market           Market                @relation(fields: [marketId], references: [id], onDelete: Cascade)
  SidebarOption    VendorSidebarOption[]
  Permissions      Permissions[]
  Funnels          Funnel[]
  Media            Media[]
  Contact          Contact[]
  Trigger          Trigger[]
  Automation       Automation[]
  Pipeline         Pipeline[]
  Tags             Tag[]
  Notification     Notification[]

  @@index([marketId])
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vendorId  String
  Vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  Ticket    Ticket[]

  @@index([vendorId])
}

model Pipeline {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vendorId  String
  Lane      Lane[]
  Vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
}

model Lane {
  id         String   @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pipelineId String
  order      Int      @default(0)
  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  Tickets    Ticket[]

  @@index([pipelineId])
}

model Ticket {
  id             String   @id @default(uuid())
  name           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  laneId         String
  order          Int      @default(0)
  value          Decimal?
  description    String?
  customerId     String?
  assignedUserId String?
  Lane           Lane     @relation(fields: [laneId], references: [id], onDelete: Cascade)
  Tags           Tag[]
  Customer       Contact? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  Assigned       User?    @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@index([laneId])
  @@index([customerId])
  @@index([assignedUserId])
}

model Trigger {
  id          String       @id @default(uuid())
  name        String
  type        TriggerTypes
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  vendorId    String
  Vendor      Vendor       @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  Automations Automation[]

  @@index([vendorId])
}

model Automation {
  id                 String               @id @default(uuid())
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  triggerId          String?
  published          Boolean              @default(false)
  vendorId           String
  Trigger            Trigger?             @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  Vendor             Vendor               @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  Action             Action[]
  AutomationInstance AutomationInstance[]

  @@index([triggerId])
  @@index([vendorId])
}

model AutomationInstance {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  active       Boolean    @default(false)
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@index([automationId])
}

model Action {
  id           String     @id @default(uuid())
  name         String
  type         ActionType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  order        Int
  laneId       String     @default("0")
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@index([automationId])
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vendorId  String
  Vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  Ticket    Ticket[]

  @@index([vendorId])
}

model Media {
  id        String   @id @default(uuid())
  type      String?
  name      String
  link      String   @unique
  vendorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
}

model Funnel {
  id            String       @id @default(uuid())
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  description   String?
  published     Boolean      @default(false)
  subDomainName String?      @unique
  favicon       String?      @db.Text
  vendorId      String
  liveProducts  String?      @default("[]")
  Vendor        Vendor       @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  FunnelPages   FunnelPage[]
  ClassName     ClassName[]

  @@index([vendorId])
}

model ClassName {
  id         String   @id @default(uuid())
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  funnelId   String
  customData String?  @db.LongText
  Funnel     Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model FunnelPage {
  id           String   @id @default(uuid())
  name         String
  pathName     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String?  @db.LongText
  order        Int
  previewImage String?  @db.Text
  funnelId     String
  Funnel       Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model MarketSidebarOption {
  id        String   @id @default(uuid())
  name      String   @default("Menu")
  link      String   @default("#")
  icon      Icon     @default(info)
  marketId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Market    Market?  @relation(fields: [marketId], references: [id], onDelete: Cascade)

  @@index([marketId])
}

model VendorSidebarOption {
  id        String   @id @default(uuid())
  name      String   @default("Menu")
  link      String   @default("#")
  icon      Icon     @default(info)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vendorId  String?
  Vendor    Vendor?  @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
}

model Invitation {
  id       String           @id @default(uuid())
  email    String           @unique
  marketId String
  status   InvitationStatus @default(PENDING)
  role     Role             @default(VENDOR_USER)
  Market   Market           @relation(fields: [marketId], references: [id], onDelete: Cascade)

  @@index([marketId])
}

model Notification {
  id           String   @id @default(uuid())
  notification String
  marketId     String
  vendorId     String?
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Market       Market   @relation(fields: [marketId], references: [id], onDelete: Cascade)
  Vendor       Vendor?  @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([marketId])
  @@index([vendorId])
  @@index([userId])
}

model Subscription {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  plan                 Plan?
  price                String?
  active               Boolean  @default(false)
  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique
  marketId             String?  @unique
  Market               Market?  @relation(fields: [marketId], references: [id])

  @@index([customerId])
}

model AddOns {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  active    Boolean  @default(false)
  priceId   String   @unique
  marketId  String?
  Market    Market?  @relation(fields: [marketId], references: [id])

  @@index([marketId])
}

model TagToTicket {
  A String
  B String

  @@unique([A, B], map: "_TagToTicket_AB_unique")
  @@index([B], map: "_TagToTicket_B_index")
  @@map("_TagToTicket")
}

enum Role {
  MARKET_OWNER
  MARKET_ADMIN
  VENDOR_USER
  VENDOR_GUEST
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

enum TriggerTypes {
  CONTACT_FORM
}

enum ActionType {
  CREATE_CONTACT
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

enum Plan {
  price_1OYxkqFj9oKEERu1NbKUxXxN
  price_1OYxkqFj9oKEERu1KfJGWxgN
}
